#!/usr/bin/env python3

import sys
import yaml

def main(argv):
    if len(argv) != 1:
        print('Usage: ' + sys.argv[0] + ' <spec-file>')
        exit(1)

    target = "../../../Rpc/InstalistRpc.php"
    contents = ""
    f = open(target, 'wb')
    print('Writing contents to ' + target + ' ...')
    with open(argv[0], 'r') as source:
        contents = source.read()
    
    f.write(bytes('<?php \n\n', 'UTF-8'))
    f.write(bytes('namespace InstalistBundle\Rpc; \n\n', 'UTF-8'))      
    f.write(bytes('use Ratchet\ConnectionInterface; \n', 'UTF-8'))
    f.write(bytes('use Gos\Bundle\WebSocketBundle\RPC\RpcInterface; \n', 'UTF-8'))
    f.write(bytes('use Gos\Bundle\WebSocketBundle\Router\WampRequest; \n', 'UTF-8'))
    
    f.write(bytes('class InstalistRpc implements RpcInterface \n', 'UTF-8'))
    f.write(bytes('{ \n', 'UTF-8'))
    spec = yaml.load(contents)
    rpc_spec = spec['rpc']
    for current_rpc_method in rpc_spec:
        f.write(bytes('/** \n', 'UTF-8'))
        f.write(bytes(' * ' + current_rpc_method + ' (autogenerated method definition)\n', 'UTF-8'))
        f.write(bytes(' * expected wamp-parameters: ', 'UTF-8'))
        if len(rpc_spec[current_rpc_method]['parameters']) == 0:
            f.write(bytes("none \n", 'UTF-8'))
        else:
            f.write(bytes(', '.join(rpc_spec[current_rpc_method]['parameters'])+ '\n', 'UTF-8'))
        f.write(bytes(' * \n', 'UTF-8'))
        for description_line in rpc_spec[current_rpc_method]['description'].split("\n"):
            if len(description_line.strip(' \t\n\r')) == 0:
                continue
            f.write(bytes(' * ' + description_line + '\n', 'UTF-8'))
        f.write(bytes(' * @param ConnectionInterface $connection \n', 'UTF-8'))
        f.write(bytes(' * @param WampRequest $request \n', 'UTF-8'))
        f.write(bytes(' * @param array $params \n', 'UTF-8'))
        return_vars_doc = []
        return_vars_text = []
        for return_var in rpc_spec[current_rpc_method]['returns']:
            if rpc_spec[current_rpc_method]['returns'][return_var] == 'int':
                return_vars_doc.append('"' + return_var + '" (int)')
                return_vars_text.append('"' + return_var + '" => 0')
            elif rpc_spec[current_rpc_method]['returns'][return_var] == 'float':
                return_vars_doc.append('"' + return_var + '" (float)')
                return_vars_text.append('"' + return_var + '" => 0.0')
            elif rpc_spec[current_rpc_method]['returns'][return_var] == 'string':
                return_vars_doc.append('"' + return_var + '" (string)')
                return_vars_text.append('"' + return_var + '" => ""')
            elif rpc_spec[current_rpc_method]['returns'][return_var] == 'list':
                return_vars_doc.append('"' + return_var + '" (array)')
                return_vars_text.append('"' + return_var + '" => array()')
            else:
                return_vars_doc.append('"' + return_var + '" (object)')
                return_vars_text.append('"' + return_var + '" => null')
        f.write(bytes(' * @return array indexed with following keys: ' + ', '.join(return_vars_doc) + '\n', 'UTF-8'))
        f.write(bytes(' */ \n', 'UTF-8'))
        f.write(bytes('public function ' + current_rpc_method + '(ConnectionInterface $connection, WampRequest $request, $params) { \n', 'UTF-8'))
        f.write(bytes('    // method stub. \n', 'UTF-8'))
        f.write(bytes('    return array(' + ', '.join(return_vars_text) + '); \n', 'UTF-8'))
        f.write(bytes('} \n', 'UTF-8'))
        f.write(bytes('\n', 'UTF-8'))

    f.write(bytes('/** \n', 'UTF-8'))
    f.write(bytes('* Name of RPC, use for pubsub router (see step3) \n', 'UTF-8'))
    f.write(bytes('* \n', 'UTF-8'))
    f.write(bytes('* @return string \n', 'UTF-8'))
    f.write(bytes('*/ \n', 'UTF-8'))
    f.write(bytes('public function getName() \n', 'UTF-8'))
    f.write(bytes('{ \n', 'UTF-8'))
    f.write(bytes('    return \'instalist.rpc\'\n', 'UTF-8'));
    f.write(bytes('} \n', 'UTF-8'))       
        
    f.write(bytes('} \n', 'UTF-8'))    

main(sys.argv[1:])

