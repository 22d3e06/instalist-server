<?php 

namespace InstalistBundle\Rpc; 

use Ratchet\ConnectionInterface; 
use Gos\Bundle\WebSocketBundle\RPC\RpcInterface; 
use Gos\Bundle\WebSocketBundle\Router\WampRequest; 
class InstalistRpc implements RpcInterface 
{ 
/** 
 * addList (autogenerated method definition)
 * expected wamp-parameters: uuid, name, category
 * 
 * Creates or updates a list.
 * code: HTTP-Codes. Can especially be 409, when name or uuid is already used. Always set.
 * badparams: A list of strings, containing the names of bad parameters.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "badparams" (array), "code" (int)
 */ 
public function addList(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("badparams" => array(), "code" => 0); 
} 

/** 
 * getProductUuids (autogenerated method definition)
 * expected wamp-parameters: none 
 * 
 * Returns a list of all product uuids.
 * code: See HTTP-return-codes. Always set.
 * products: list of product uuids.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "code" (int), "products" (array)
 */ 
public function getProductUuids(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("code" => 0, "products" => array()); 
} 

/** 
 * getListUuids (autogenerated method definition)
 * expected wamp-parameters: none 
 * 
 * Returns all accessible lists.
 * code: See HTTP-return-codes. Always set.
 * lists: Lists of strings containing list-uuids.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "lists" (array), "code" (int)
 */ 
public function getListUuids(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("lists" => array(), "code" => 0); 
} 

/** 
 * addProduct (autogenerated method definition)
 * expected wamp-parameters: uuid, name, unit, defaultAmount, stepAmount
 * 
 * Adds a product to the product pool.
 * code: See HTTP-return-codes. Always set.
 * badparams: A list of strings, containing the names of bad parameters.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "badparams" (array), "code" (int)
 */ 
public function addProduct(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("badparams" => array(), "code" => 0); 
} 

/** 
 * addTag (autogenerated method definition)
 * expected wamp-parameters: uuid, name
 * 
 * Adds a tag to the tag pool.
 * code: See HTTP-return-codes. Always set.
 * badparams: A list of strings, containing the names of bad parameters.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "badparams" (array), "code" (int)
 */ 
public function addTag(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("badparams" => array(), "code" => 0); 
} 

/** 
 * updateTaggedProduct (autogenerated method definition)
 * expected wamp-parameters: uuid, tag, product
 * 
 * Updates the taggedProduct.
 * code: See HTTP-return-codes. Always set.
 * badparams: A list of strings, containing the names of bad parameters.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "badparams" (array), "code" (int)
 */ 
public function updateTaggedProduct(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("badparams" => array(), "code" => 0); 
} 

/** 
 * getListEntryUuids (autogenerated method definition)
 * expected wamp-parameters: none 
 * 
 * Returns a list of all listEntry uuids.
 * code: See HTTP-return-codes. Always set.
 * listEntries: list of listEntry uuids.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "listEntries" (array), "code" (int)
 */ 
public function getListEntryUuids(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("listEntries" => array(), "code" => 0); 
} 

/** 
 * getTaggedProductUuids (autogenerated method definition)
 * expected wamp-parameters: none 
 * 
 * Returns a list of all taggedProduct uuids.
 * code: See HTTP-return-codes. Always set.
 * taggedProducts: list of taggedProduct uuids.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "taggedProducts" (array), "code" (int)
 */ 
public function getTaggedProductUuids(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("taggedProducts" => array(), "code" => 0); 
} 

/** 
 * addListEntry (autogenerated method definition)
 * expected wamp-parameters: uuid, shoppingList, product, amount, struck, priority
 * 
 * Adds a listEntry to the listEntry pool.
 * code: See HTTP-return-codes. Always set.
 * badparams: A list of strings, containing the names of bad parameters.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "badparams" (array), "code" (int)
 */ 
public function addListEntry(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("badparams" => array(), "code" => 0); 
} 

/** 
 * deleteIngredient (autogenerated method definition)
 * expected wamp-parameters: uuid
 * 
 * Deletes the ingredient related to the given uuid.
 * code: See HTTP-return-codes. Always set.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "code" (int)
 */ 
public function deleteIngredient(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("code" => 0); 
} 

/** 
 * getIngredient (autogenerated method definition)
 * expected wamp-parameters: uuid
 * 
 * Returns the ingredient by the given uuid.
 * code: See HTTP-return-codes. Always set.
 * uuid: The uuid of the ingredient.
 * product: The uuid of the product the ingredient represents.
 * recipe: The uuid of the recipe the ingredient is related to.
 * amount: The amount of how many items of this product are in the recipe.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "recipe" (string), "amount" (float), "uuid" (string), "code" (int), "product" (string)
 */ 
public function getIngredient(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("recipe" => "", "amount" => 0.0, "uuid" => "", "code" => 0, "product" => ""); 
} 

/** 
 * updateRecipe (autogenerated method definition)
 * expected wamp-parameters: uuid, name
 * 
 * Updates the recipe.
 * code: See HTTP-return-codes. Always set.
 * badparams: A list of strings, containing the names of bad parameters.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "badparams" (array), "code" (int)
 */ 
public function updateRecipe(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("badparams" => array(), "code" => 0); 
} 

/** 
 * deleteProduct (autogenerated method definition)
 * expected wamp-parameters: uuid
 * 
 * Deletes the product related to the given id. (Mit deletion mode?)
 * code: See HTTP-return-codes. Always set.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "code" (int)
 */ 
public function deleteProduct(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("code" => 0); 
} 

/** 
 * updateUnit (autogenerated method definition)
 * expected wamp-parameters: uuid, name
 * 
 * Updates the unit.
 * code: See HTTP-return-codes. Always set.
 * badparams: A list of strings, containing the names of bad parameters.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "badparams" (array), "code" (int)
 */ 
public function updateUnit(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("badparams" => array(), "code" => 0); 
} 

/** 
 * updateProduct (autogenerated method definition)
 * expected wamp-parameters: uuid, name, unit, defaultAmount, stepAmount
 * 
 * Updates the product.
 * code: See HTTP-return-codes. Always set.
 * badparams: A list of strings, containing the names of bad parameters.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "badparams" (array), "code" (int)
 */ 
public function updateProduct(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("badparams" => array(), "code" => 0); 
} 

/** 
 * getRecipeUuids (autogenerated method definition)
 * expected wamp-parameters: none 
 * 
 * Returns a list of all recipe uuids.
 * code: See HTTP-return-codes. Always set.
 * recipes: list of recipe uuids.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "recipes" (array), "code" (int)
 */ 
public function getRecipeUuids(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("recipes" => array(), "code" => 0); 
} 

/** 
 * getTaggedProductUuidsByProduct (autogenerated method definition)
 * expected wamp-parameters: product
 * 
 * Returns a list of all taggedProduct uuids related to a given product uuid.
 * code: See HTTP-return-codes. Always set.
 * taggedProducts: list of taggedProduct uuids.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "taggedProducts" (array), "code" (int)
 */ 
public function getTaggedProductUuidsByProduct(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("taggedProducts" => array(), "code" => 0); 
} 

/** 
 * addUnit (autogenerated method definition)
 * expected wamp-parameters: uuid, name
 * 
 * Adds a unit to the unit pool.
 * code: See HTTP-return-codes. Always set.
 * badparams: A list of strings, containing the names of bad parameters.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "badparams" (array), "code" (int)
 */ 
public function addUnit(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("badparams" => array(), "code" => 0); 
} 

/** 
 * addCategory (autogenerated method definition)
 * expected wamp-parameters: uuid, name
 * 
 * Adds a category to the category pool.
 * code: See HTTP-return-codes. Always set.
 * badparams: A list of strings, containing the names of bad parameters.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "badparams" (array), "code" (int)
 */ 
public function addCategory(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("badparams" => array(), "code" => 0); 
} 

/** 
 * updateCategory (autogenerated method definition)
 * expected wamp-parameters: uuid, name
 * 
 * Updates the category.
 * code: See HTTP-return-codes. Always set.
 * badparams: A list of strings, containing the names of bad parameters.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "badparams" (array), "code" (int)
 */ 
public function updateCategory(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("badparams" => array(), "code" => 0); 
} 

/** 
 * getUnitUuids (autogenerated method definition)
 * expected wamp-parameters: none 
 * 
 * Returns a list of all unit ids.
 * code: See HTTP-return-codes. Always set.
 * units: list of unit uuids.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "units" (array), "code" (int)
 */ 
public function getUnitUuids(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("units" => array(), "code" => 0); 
} 

/** 
 * getList (autogenerated method definition)
 * expected wamp-parameters: uuid
 * 
 * Returns one list.
 * code: See HTTP-return-codes. Always set.
 * category: Either null (no category) or uuid of category.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "code" (int), "name" (string), "category" (string), "uuid" (string)
 */ 
public function getList(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("code" => 0, "name" => "", "category" => "", "uuid" => ""); 
} 

/** 
 * deleteTaggedProduct (autogenerated method definition)
 * expected wamp-parameters: uuid
 * 
 * Deletes the taggedProduct related to the given uuid.
 * code: See HTTP-return-codes. Always set.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "code" (int)
 */ 
public function deleteTaggedProduct(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("code" => 0); 
} 

/** 
 * getTaggedProduct (autogenerated method definition)
 * expected wamp-parameters: uuid
 * 
 * Returns the taggedProduct by the given uuid.
 * code: See HTTP-return-codes. Always set.
 * uuid: The uuid of the taggedProduct.
 * tag: The tag uuid of the taggedProduct.
 * product: The product uuid of the taggedProduct.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "tag" (string), "uuid" (string), "code" (int), "product" (string)
 */ 
public function getTaggedProduct(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("tag" => "", "uuid" => "", "code" => 0, "product" => ""); 
} 

/** 
 * updateIngredient (autogenerated method definition)
 * expected wamp-parameters: uuid, product, recipe, amount
 * 
 * Updates the ingredient.
 * code: See HTTP-return-codes. Always set.
 * badparams: A list of strings, containing the names of bad parameters.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "badparams" (array), "code" (int)
 */ 
public function updateIngredient(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("badparams" => array(), "code" => 0); 
} 

/** 
 * deleteRecipe (autogenerated method definition)
 * expected wamp-parameters: uuid
 * 
 * Deletes the recipe related to the given uuid. Also deletes all related ingredients.
 * code: See HTTP-return-codes. Always set.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "code" (int)
 */ 
public function deleteRecipe(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("code" => 0); 
} 

/** 
 * getProduct (autogenerated method definition)
 * expected wamp-parameters: uuid
 * 
 * Returns the product by the given uuid.
 * code: See HTTP-return-codes. Always set.
 * uuid: The uuid of the product.
 * name: The name of the product.
 * unit: The uuid of the unit or null if no unit.
 * defaultAmount: The amount of this item that is added to the shoppingList.
 * stepAmount: The amount of a step when increasing or decreasing the value.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "code" (int), "uuid" (string), "defaultAmount" (float), "unit" (string), "name" (string), "stepAmount" (float)
 */ 
public function getProduct(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("code" => 0, "uuid" => "", "defaultAmount" => 0.0, "unit" => "", "name" => "", "stepAmount" => 0.0); 
} 

/** 
 * deleteList (autogenerated method definition)
 * expected wamp-parameters: uuid
 * 
 * Deletes one list.
 * code: See HTTP-return-codes. Always set.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "code" (int)
 */ 
public function deleteList(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("code" => 0); 
} 

/** 
 * addRecipe (autogenerated method definition)
 * expected wamp-parameters: uuid, name
 * 
 * Adds a recipe to the recipe pool.
 * code: See HTTP-return-codes. Always set.
 * badparams: A list of strings, containing the names of bad parameters.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "badparams" (array), "code" (int)
 */ 
public function addRecipe(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("badparams" => array(), "code" => 0); 
} 

/** 
 * addIngredient (autogenerated method definition)
 * expected wamp-parameters: uuid, product, recipe, amount
 * 
 * Adds a ingredient to the ingredient pool.
 * code: See HTTP-return-codes. Always set.
 * badparams: A list of strings, containing the names of bad parameters.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "badparams" (array), "code" (int)
 */ 
public function addIngredient(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("badparams" => array(), "code" => 0); 
} 

/** 
 * getListEntry (autogenerated method definition)
 * expected wamp-parameters: uuid
 * 
 * Returns the product by the given uuid.
 * code: See HTTP-return-codes. Always set.
 * uuid: The uuid of the listEntry.
 * shoppingList: The uuid of the shoppingList the entry is related to.
 * product: The product uuid the listEntry represents.
 * amount: The amount of how many items of this product are in the current list.
 * struck: Represents if a entry is struck(true) or not struck (false).
 * priority: An indicator which priority this entry has.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "amount" (float), "priority" (int), "code" (int), "product" (string), "uuid" (string), "shoppingList" (string), "struck" (object)
 */ 
public function getListEntry(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("amount" => 0.0, "priority" => 0, "code" => 0, "product" => "", "uuid" => "", "shoppingList" => "", "struck" => null); 
} 

/** 
 * getCategoryUuids (autogenerated method definition)
 * expected wamp-parameters: none 
 * 
 * Returns a list of all category ids.
 * code: See HTTP-return-codes. Always set.
 * categories: list of category uuids.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "categories" (array), "code" (int)
 */ 
public function getCategoryUuids(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("categories" => array(), "code" => 0); 
} 

/** 
 * deleteListEntry (autogenerated method definition)
 * expected wamp-parameters: uuid
 * 
 * Deletes the listEntry related to the given id.
 * code: See HTTP-return-codes. Always set.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "code" (int)
 */ 
public function deleteListEntry(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("code" => 0); 
} 

/** 
 * getCategory (autogenerated method definition)
 * expected wamp-parameters: uuid
 * 
 * Returns the list by the given uuid.
 * code: See HTTP-return-codes. Always set.
 * uuid: The uuid of the category.
 * name: The name of the category.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "code" (int), "name" (string), "uuid" (string)
 */ 
public function getCategory(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("code" => 0, "name" => "", "uuid" => ""); 
} 

/** 
 * updateListEntry (autogenerated method definition)
 * expected wamp-parameters: uuid, shoppingList, product, amount, struck, priority
 * 
 * Updates the listEntry.
 * code: See HTTP-return-codes. Always set.
 * badparams: A list of strings, containing the names of bad parameters.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "badparams" (array), "code" (int)
 */ 
public function updateListEntry(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("badparams" => array(), "code" => 0); 
} 

/** 
 * getTag (autogenerated method definition)
 * expected wamp-parameters: uuid
 * 
 * Returns the tag by the given uuid.
 * code: See HTTP-return-codes. Always set.
 * uuid: The uuid of the tag.
 * name: The name of the tag.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "code" (int), "name" (string), "uuid" (string)
 */ 
public function getTag(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("code" => 0, "name" => "", "uuid" => ""); 
} 

/** 
 * updateTag (autogenerated method definition)
 * expected wamp-parameters: uuid, name
 * 
 * Updates the tag.
 * code: See HTTP-return-codes. Always set.
 * badparams: A list of strings, containing the names of bad parameters.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "badparams" (array), "code" (int)
 */ 
public function updateTag(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("badparams" => array(), "code" => 0); 
} 

/** 
 * getUnit (autogenerated method definition)
 * expected wamp-parameters: uuid
 * 
 * Returns the unit by the given uuid.
 * code: See HTTP-return-codes. Always set.
 * uuid: The uuid of the unit.
 * name: The name of the unit.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "code" (int), "name" (string), "uuid" (string)
 */ 
public function getUnit(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("code" => 0, "name" => "", "uuid" => ""); 
} 

/** 
 * getTagUuids (autogenerated method definition)
 * expected wamp-parameters: none 
 * 
 * Returns a list of all tag uuids.
 * code: See HTTP-return-codes. Always set.
 * tags: list of tag uuids.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "tags" (array), "code" (int)
 */ 
public function getTagUuids(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("tags" => array(), "code" => 0); 
} 

/** 
 * getRecipe (autogenerated method definition)
 * expected wamp-parameters: uuid
 * 
 * Returns the recipe by the given uuid.
 * code: See HTTP-return-codes. Always set.
 * uuid: The uuid of the recipe.
 * name: The name of the recipe.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "code" (int), "name" (string), "uuid" (string)
 */ 
public function getRecipe(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("code" => 0, "name" => "", "uuid" => ""); 
} 

/** 
 * deleteUnit (autogenerated method definition)
 * expected wamp-parameters: uuid
 * 
 * Deletes the unit related to the given id. (Mit deletion mode?)
 * code: See HTTP-return-codes. Always set.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "code" (int)
 */ 
public function deleteUnit(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("code" => 0); 
} 

/** 
 * getTaggedProductUuidsByTag (autogenerated method definition)
 * expected wamp-parameters: tag
 * 
 * Returns a list of all taggedProduct uuids related to a given tag uuid.
 * code: See HTTP-return-codes. Always set.
 * taggedProducts: list of taggedProduct uuids.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "taggedProducts" (array), "code" (int)
 */ 
public function getTaggedProductUuidsByTag(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("taggedProducts" => array(), "code" => 0); 
} 

/** 
 * getIngredientUuidsByRecipe (autogenerated method definition)
 * expected wamp-parameters: recipe
 * 
 * Returns a list of all ingredient uuids that are related to this recipe.
 * code: See HTTP-return-codes. Always set.
 * ingredients: list of ingredient uuids.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "ingredients" (array), "code" (int)
 */ 
public function getIngredientUuidsByRecipe(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("ingredients" => array(), "code" => 0); 
} 

/** 
 * deleteTag (autogenerated method definition)
 * expected wamp-parameters: uuid
 * 
 * Deletes the tag related to the given id. (Mit deletion mode?)
 * code: See HTTP-return-codes. Always set.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "code" (int)
 */ 
public function deleteTag(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("code" => 0); 
} 

/** 
 * deleteCategory (autogenerated method definition)
 * expected wamp-parameters: uuid
 * 
 * Deletes the category related to the given id. (Deletes no category with lists in it?)
 * code: See HTTP-return-codes. Always set.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "code" (int)
 */ 
public function deleteCategory(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("code" => 0); 
} 

/** 
 * addTaggedProduct (autogenerated method definition)
 * expected wamp-parameters: uuid, tag, product
 * 
 * Adds a taggedProduct to the taggedProduct pool.
 * code: See HTTP-return-codes. Always set.
 * badparams: A list of strings, containing the names of bad parameters.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "badparams" (array), "code" (int)
 */ 
public function addTaggedProduct(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("badparams" => array(), "code" => 0); 
} 

/** 
 * updateList (autogenerated method definition)
 * expected wamp-parameters: uuid, name, category
 * 
 * Updates a list.
 * code: HTTP-Codes. Can especially be 409, when name already used. Always set.
 * badparams: A list of strings, containing the names of bad parameters.
 * @param ConnectionInterface $connection 
 * @param WampRequest $request 
 * @param array $params 
 * @return array indexed with following keys: "badparams" (array), "code" (int)
 */ 
public function updateList(ConnectionInterface $connection, WampRequest $request, $params) { 
    // method stub. 
    return array("badparams" => array(), "code" => 0); 
} 

/** 
* Name of RPC, use for pubsub router (see step3) 
* 
* @return string 
*/ 
public function getName() 
{ 
    return 'instalist.rpc'
} 
} 
