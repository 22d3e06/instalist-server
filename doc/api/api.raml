#%RAML 0.8
title: InstantList API
version: v1
baseUri: http://instantlist.noorganization.org/{version}
mediaType: application/json
protocols: [ HTTP, HTTPS ]

schemas:
  - category: !include schemas/category.schema
  - ingredient: !include schemas/ingredient.schema
  - listEntry: !include schemas/listEntry.schema
  - product: !include schemas/product.schema
  - recipe: !include schemas/recipe.schema
  - shoppingList: !include schemas/shoppingList.schema
  - tag: !include schemas/tag.schema
  - taggedProduct: !include schemas/taggedProduct.schema
  - unit: !include schemas/unit.schema
  - resetPassword: !include schemas/resetPassword.schema
  - login: !include schemas/login.schema
  - register: !include schemas/register.schema
  - error: !include schemas/error.schema

securitySchemes:
  - basic:
      type: Basic Authentication
      describedBy:
        headers:
          Authorization:
              description: |
                Authorization-header as defined per RFC 2617. Expects the server defined user-id as user and the client defined secret as password.
  - token:
      type: x-token
      describedBy:
        queryParameters:
          token:
              description: |
                A server-generated token-string.
                can be obtained via /user/token.
              example: 069e74d9-207f-4679-b652-36a32695135c
              required: true

traits:
  - secured:
      securedBy: [token]
      displayName: Secured
      description: Request require authentication!
      responses:
        401:
          description: Unauthorized
            
  - responseTypes:
      responses:
        202:
          description: The change was accepted. Please look again later for results.
  - added:
      responses:
        201:
          description: The element was correctly added.
          body:
            application/json:
              example: |
                {
                  "uuid": "522353e8-fd6d-465a-bca9-862d7633078e"
                }
#        204:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "Successfull processed by server, no content."
#                    },
#                  "status" : 204,
#                  "success" : true
#                }
#       300:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "Various changes, look into the location header fields"
#                    },
#                  "status" : 300,
#                  "success" : false
#                }
#
#        403:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "You have no rights to do this!"
#                    },
#                  "status" : 403,
#                  "success" : false
#                }
#        405:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "This method is not supported!"
#                    },
#                  "status" : 405,
#                  "success" : false
#                }
#        408:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "The request timed out, try again!"
#                    },
#                  "status" : 408,
#                  "success" : false
#                }
#        409:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "There is a conflict with data!"
#                    },
#                  "status" : 409,
#                  "success" : false
#                }
#        410:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "The resource is gone!"
#                    },
#                  "status" : 410,
#                  "success" : false
#                }
#        413:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "The sent entity was too large!"
#                    },
#                  "status" : 413,
#                  "success" : false
#                }
#        423:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "This resource is currently locked."
#                    },
#                  "status" : 423,
#                  "success" : false
#                }
#        429:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "Too many requests. Calm down!"
#                    },
#                  "status" : 429,
#                  "success" : false
#                }
#        500:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "Server error!"
#                    },
#                  "status" : 500,
#                  "success" : false
#                }

      #queryParameters:
      #  accessToken:
      #    displayName: AccessToken
      #    description: An access token is required for secured routes
      #    required: true

resourceTypes:
  - collection:
      description: Collection of available <<resourcePathName>>.
      get:
        is: [responseTypes, secured]
        description: |
          Get a list of <<resourcePathName>>.
        queryParameters:
          changedSince:
            displayName: Changed Since
            type: date
            description: Requests only the elements that changed since the given date. ISO 8601 time
            example: 2016-01-19T11:54:07+01:00
            required: false
        responses:
          200:
            body:
              application/json:
                example: |
                  <<exampleCollection>>
          400:
            body:
              application/json:
                schema: error
  - collection-item:
      description: Entity representing a <<resourcePathName|!singularize>>.
      get:
        is: [responseTypes, secured]
        description: |
          Returns the <<resourcePathName|!singularize>>.
        responses:
          200:
            body:
              application/json:
                example: <<exampleReturnItem>>
          400:
            body:
              application/json:
                schema: error
      put:
        is: [responseTypes, secured]
        description: |
          Updates the <<resourcePathName|!singularize>>.
        body:
          application/json:
            schema: <<exampleSchema>>
            example: <<exampleItem>>
        responses:
          200:
            description: Update was successful.
          400:
            body:
              application/json:
                schema: error
      post:
        is: [responseTypes, secured, added]
        description: |
          Creates the <<resourcePathName|!singularize>>.
        body:
          application/json:
            schema: <<exampleSchema>>
            example: <<exampleItem>>
        responses:
          200:
            description: Update was successful.
          400:
            body:
              application/json:
                schema: error
      delete:
        is: [responseTypes, secured]
        description: |
          Deletes the <<resourcePathName|!singularize>>.
        responses:
          200:
            description: Deletion was successful.
          400:
            body:
              application/json:
                schema: error

/user:
  /token:
    securedBy: [basic]
    get:
      is: [responseTypes]
      description: Get the auth token
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "token" : "fdskhbvvkddscddueFSNDFSAdnandk3229df-dFSJDKMds."
                }
        400:
          body:
            application/json:
              schema: error
  /register_device:
    post:
      is: [responseTypes, added]
      description: The action to connect a new device with a group.
      body:
        application/json:
          example: |
            {
              "groupid" : "AB7Zbm",
              "secret" : "dkjhfsdcbuiufien=--ihrienncdjXXCndjjFJJED"
            }
      responses:
        200:
          description: This gets returned if registration with group was successful and login is now possible.
          body:
            application/json:
              example: |
                {
                  "deviceid" : 1337
                }
  /register_group:
    post:
      is: [responseTypes]
      description: The action to create a new group of devices sharing lists etc.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "groupid": "AB7Zbm"
                }
  /group/access_key:
    get:
      is: [responseTypes, secured]
      description: The action to get a temporary access key to a group.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "groupid": "AB7Zbm"
                }
#  /login:
#    post:
#      is: [responseTypes, hasAuth]
#      description: The action to login an user.
#      body:
#        application/json:
#          schema: login
##          example: |
#            {
#              "eMail" : "HansWurst@nonesense.bit",
#              "password": "blabla"
#            }
#      responses:
#        200:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "Login succeeded!",
#                      "token" : "some token"
#                    },
#                  "status" : 200,
#                  "success" : true
#                }
#        400:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "There was an error with your login."
#                    },
#                  "status" : 400,
#                  "success" : false
#                }

#/resetPassword:
#  post:
#    is: [responseTypes, hasAuth]
#    description: The action to reset a password of a user.
#    body:
#      application/json:
#        schema: resetPassword
#        example: |
#          {
#            "eMail" : "HansWurst@nonesense.bit"
#          }
#    responses:
#      200:
#        body:
#          application/json:
#             example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "E-Mail was sent to your inbox. Click the link to reset the password!"
#                    },
#                  "status" : 200,
#                  "success" : true
#                }
#        400:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "There was an error with your E-Mail address."
#                    },
#                  "status" : 400,
#                  "success" : false
#                }

/categories:
  is: [secured]
  type:  { collection: {exampleCollection : !include examples/categoryCollectionReturn.example } }
  /{categoryId}:
    is: [secured]
    type:  { collection-item: {exampleReturnItem : !include examples/categoryReturn.example, exampleSchema : category, exampleItem : !include examples/category.example} }

/products:
  is: [secured]
  type: {collection: {exampleCollection : !include examples/productCollectionReturn.example } }
  /{productId}:
    is: [secured]
    type: {collection-item: {exampleReturnItem : !include examples/productReturn.example, exampleSchema : product, exampleItem : !include examples/product.example} }
/lists:
  is: [secured]
  type:  { collection: {exampleCollection : !include examples/shoppingListCollectionReturn.example } }
  /{listId}:
    is: [secured]
    type:  { collection-item: {exampleReturnItem : !include examples/shoppingListReturn.example, exampleSchema : shoppingList, exampleItem : !include examples/shoppingList.example } }

/recipes:
  is: [secured]
  type:  { collection: {exampleCollection : !include examples/recipeCollectionReturn.example } }
  /{recipeId}:
    is: [secured]
    type:  { collection-item: {exampleReturnItem : !include examples/recipeReturn.example, exampleSchema : recipe, exampleItem : !include examples/recipe.example } }
  /ingredients:
    is: [secured]
    type:  { collection: {exampleCollection : !include examples/ingredientCollectionRecipeReturn.example } }

/taggedProducts:
  is: [secured]
  type:  { collection: {exampleCollection : !include examples/taggedProductCollectionReturn.example } }
  /{taggedProductId}:
    is: [secured]
    type:  { collection-item: {exampleReturnItem : !include examples/tagReturn.example, exampleSchema : taggedProduct, exampleItem : !include examples/taggedProduct.example } }

/tags:
  is: [secured]
  type:  { collection: {exampleCollection : !include examples/tagCollectionReturn.example } }
  /{tagId}:
    is: [secured]
    type:  { collection-item: {exampleReturnItem : , exampleSchema : tag, exampleItem : !include examples/tag.example } }

/listEntries:
  is: [secured]
  type:  { collection: {exampleCollection : !include examples/listEntryCollectionReturn.example } }
  /{listEntryId}:
    is: [secured]
    type:  { collection-item: {exampleReturnItem : , exampleSchema : listEntry, exampleItem : !include examples/shoppingList.example } }

/units:
  is: [secured]
  type:  { collection: {exampleCollection : !include examples/unitCollectionReturn.example } }
  /{unitId}:
    is: [secured]
    type:  { collection-item: {exampleReturnItem : !include examples/unitReturn.example, exampleSchema : unit, exampleItem : !include examples/unit.example} }

/ingredients:
  is: [secured]
  type:  { collection: {exampleCollection : !include examples/ingredientCollectionReturn.example } }
  /{ingredientId}:
    is: [secured]
    type: {collection-item: {exampleReturnItem : !include examples/ingredientReturn.example, exampleSchema : ingredient, exampleItem : !include examples/ingredient.example} }
