#%RAML 0.8
title: InstantList API
version: v1
baseUri: http://instantlist.noorganization.org/{version}
mediaType: application/json
protocols: [ HTTP, HTTPS ]

schemas:
  - category: !include schemas/category.schema
  - ingredient: !include schemas/ingredient.schema
  - listEntry: !include schemas/listEntry.schema
  - product: !include schemas/product.schema
  - recipe: !include schemas/recipe.schema
  - shoppingList: !include schemas/shoppingList.schema
  - tag: !include schemas/tag.schema
  - taggedProduct: !include schemas/taggedProduct.schema
  - unit: !include schemas/unit.schema
  - resetPassword: !include schemas/resetPassword.schema
  - login: !include schemas/login.schema
  - register: !include schemas/register.schema
  - error: !include schemas/error.schema
  - deviceinfo: !include schemas/deviceinfo.schema

securitySchemes:
  - basic:
      type: Basic Authentication
      describedBy:
        headers:
          Authorization:
              description: |
                Authorization-header as defined per RFC 2617. Expects the server defined user-id as user and the client defined secret as password.
  - token:
      type: x-token
      describedBy:
        queryParameters:
          token:
              description: |
                A server-generated token-string.
                can be obtained via /user/token.
              example: 069e74d9-207f-4679-b652-36a32695135c
              required: true

traits:
  - secured:
      securedBy: [token]
      displayName: Secured
      description: Request require authentication!
      responses:
        401:
          description: Unauthorized           
  - accepted:
      responses:
        202:
          description: The change was accepted. Please look again later for results.
  - added:
      responses:
        201:
          description: The element was correctly added. The Answer depends on type of data. Usually a JSON with either id or uuid.
  - badrequest:
      responses:
        400:
          description: Sent data was incomplete or wrong.
          body:
            application/json:
              schema: error
              example: |
                {
                  "message": "sent data was incomplete."
                }
#        204:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "Successfull processed by server, no content."
#                    },
#                  "status" : 204,
#                  "success" : true
#                }
#       300:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "Various changes, look into the location header fields"
#                    },
#                  "status" : 300,
#                  "success" : false
#                }
#
#        403:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "You have no rights to do this!"
#                    },
#                  "status" : 403,
#                  "success" : false
#                }
#        405:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "This method is not supported!"
#                    },
#                  "status" : 405,
#                  "success" : false
#                }
#        408:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "The request timed out, try again!"
#                    },
#                  "status" : 408,
#                  "success" : false
#                }
#        409:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "There is a conflict with data!"
#                    },
#                  "status" : 409,
#                  "success" : false
#                }
#        410:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "The resource is gone!"
#                    },
#                  "status" : 410,
#                  "success" : false
#                }
#        413:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "The sent entity was too large!"
#                    },
#                  "status" : 413,
#                  "success" : false
#                }
#        423:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "This resource is currently locked."
#                    },
#                  "status" : 423,
#                  "success" : false
#                }
#        429:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "Too many requests. Calm down!"
#                    },
#                  "status" : 429,
#                  "success" : false
#                }
#        500:
#          body:
#            application/json:
#              example: |
#                {
#                  "data" :
#                    {
#                      "msg" : "Server error!"
#                    },
#                  "status" : 500,
#                  "success" : false
#                }

      #queryParameters:
      #  accessToken:
      #    displayName: AccessToken
      #    description: An access token is required for secured routes
      #    required: true

resourceTypes:
  - collection:
      description: Collection of available <<resourcePathName>>.
      get:
        is: [secured, badrequest]
        description: |
          Get a list of <<resourcePathName>>.
        queryParameters:
          changedSince:
            displayName: Changed Since
            type: date
            description: Requests only the elements that changed since the given date. ISO 8601 time
            example: 2016-01-19T11:54:07+01:00
            required: false
          uuid:
            displayName: Universal Unique Identifier
            type: string
            description: Identificator for the <<resourcePathName|!singularize>>.
            example: 920b63a4-40e9-4a15-b45f-c728d9225fb5
            required: false
        responses:
          200:
            body:
              application/json:
                example: |
                  <<exampleCollection>>
      post:
        is: [secured, badrequest]
        description: |
          Creates a list of <<resourcePathName>>.
        body:
          application/json:
            schema: <<exampleSchema>>
            example: <<exampleItem>>
        responses:
          201:
            description: All <<resourcePathName>> were added successfully. No data.
          409:
            description: One or more <<resourcePathName>> would get in conflict with current database. No changes made.
            body:
              application/json:
                schema: error
                example: |
                  {
                    "message": "The sent objects would collide."
                  }
      put:
        is: [secured, badrequest]
        description: |
          Updates a list of <<resourcePathName>>.
        body:
          application/json:
            schema: <<exampleSchema>>
            example: <<exampleItem>>
        responses:
          200:
            description: All <<resourcePathName>> were updated successfully. No data.
          409:
            description: One or more <<resourcePathName>> would get in conflict with current database. No changes made.
            body:
              application/json:
                schema: error
                example: |
                  {
                    "message": "The sent objects would collide."
                  }
          410:
            description: Minimum one sent <<resourcePathName>> updates a deleted <<resourcePathName|!singularize>>. No changes made.
            body:
              application/json:
                schema: error
                example: |
                  {
                    "message": "Updating deleted objects is not possible."
                  }  
      delete:
        is: [secured, badrequest]
        description: |
          Updates a list of <<resourcePathName>>.
        queryParameters:
          uuid:
            displayName: Universal Unique Identifier
            type: string
            description: Identificator for the <<resourcePathName|!singularize>>.
            example: 920b63a4-40e9-4a15-b45f-c728d9225fb5
            required: true
        responses:
          200:
            description: All <<resourcePathName>> were updated successfully. No data.
          404:
            description: A <<resourcePathName|!singularize>> with given uuid was not found.
            body:
              application/json:
                schema: error
                example: |
                  {
                    "message": "Object for deletion was not found."
                  }
          410:
            description: A <<resourcePathName|!singularize>> with given uuid has been already deleted before.
            body:
              application/json:
                schema: error
                example: |
                  {
                    "message": "Object for deletion is already deleted."
                  }
#  - collection-item:
#      description: Entity representing a <<resourcePathName|!singularize>>.
#      get:
#        is: [secured]
#        description: |
#          Returns the <<resourcePathName|!singularize>>.
#        responses:
#          200:
#            body:
#              application/json:
#                example: <<exampleReturnItem>>
#          400:
#            body:
#              application/json:
#                schema: error
#      put:
#        is: [secured, badrequest]
#        description: |
#          Updates the <<resourcePathName|!singularize>>.
#        body:
#          application/json:
#            schema: <<exampleSchema>>
#            example: <<exampleItem>>
#        responses:
#          200:
#            description: Update was successful.
#          400:
#            body:
#              application/json:
#                schema: error
#      post:
#        is: [secured, added, badrequest]
#        description: |
#          Creates the <<resourcePathName|!singularize>>.
#        body:
#          application/json:
#            schema: <<exampleSchema>>
#            example: <<exampleItem>>
#        responses:
#          200:
#            description: Update was successful.
#          400:
#            body:
#              application/json:
#                schema: error
#      delete:
#        is: [secured, badrequest]
#        description: |
#          Deletes the <<resourcePathName|!singularize>>.
#        responses:
#          200:
#            description: Deletion was successful.
#          400:
#            body:
#              application/json:
#                schema: error

/user:
  /token:
    securedBy: [basic]
    get:
      description: Get the auth token
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "token" : "fdskhbvvkddscddueFSNDFSAdnandk3229df-dFSJDKMds."
                }
        401:
          body:
            application/json:
              schema: error
              example: |
                {
                  "message": "Login failed"
                }
  /register_device:
    post:
      is: [added, accepted, badrequest]
      description: The action to connect a new device with a group.
      body:
        application/json:
          example: |
            {
              "groupid" : "AB7Zbm",
              "secret" : "dkjhfsdcbuiufien=--ihrienncdjXXCndjjFJJED"
            }
      responses:
        200:
          description: This gets returned if registration with group was successful and login is now possible.
          body:
            application/json:
              example: |
                {
                  "deviceid" : 1337
                }
  /register_group:
    post:
      description: The action to create a new group of devices sharing lists etc.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "groupid": "AB7Zbm"
                }
  /group/devices:
    get:
      is: [secured]
      description: Get a list of all devices in group.
      responses:
        200:
          body:
            application/json:
              example: |
                [
                  {
                    "id": 5,
                    "name": "dev1",
                    "authorized": true
                  },
                  {
                    "id": 4229,
                    "name": "homephone",
                    "authorized": false
                  }
                ]
              schema: deviceinfo
    put:
      is: [secured, badrequest]
      description: Modify devices. Not all attributes need to be set.
      body:
        application/json:
          schema: deviceinfo
      responses:
        200:
          description: All changes were applied. No data.
    delete:
      is: [secured, badrequest]
      description: Delete devices.
      body:
        application/json:
          example: |
            [5, 4229]
      responses:
        200:
          description: All requested devices were deleted. No data.
        404:
          description: One or more devices were not found. No data.
        
  /group/access_key:
    get:
      is: [secured]
      description: The action to get a temporary access key to a group.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "groupid": "AB7Zbm"
                }

/categories:
  is: [secured]
  type:  { collection: {exampleCollection : !include examples/categoryCollectionReturn.example, exampleSchema : category, exampleItem : !include examples/category.example } }    
#  /{categoryId}:
#    is: [secured]
#    type:  { collection-item: {exampleReturnItem : !include examples/categoryReturn.example, exampleSchema : category, exampleItem : !include examples/category.example} }

/products:
  is: [secured]
  type: {collection: {exampleCollection : !include examples/productCollectionReturn.example, exampleSchema : product, exampleItem : !include examples/product.example } }
#  /{productId}:
#    is: [secured]
#    type: {collection-item: {exampleReturnItem : !include examples/productReturn.example, exampleSchema : product, exampleItem : !include examples/product.example} }
/lists:
  is: [secured]
  type:  { collection: {exampleCollection : !include examples/shoppingListCollectionReturn.example, exampleSchema : shoppingList, exampleItem : !include examples/shoppingList.example } }
#  /{listId}:
#    is: [secured]
#    type:  { collection-item: {exampleReturnItem : !include examples/shoppingListReturn.example } }

/recipes:
  is: [secured]
  type:  { collection: {exampleCollection : !include examples/recipeCollectionReturn.example, exampleSchema : recipe, exampleItem : !include examples/recipe.example } }
#  /{recipeId}:
#    is: [secured]
#    type:  { collection-item: {exampleReturnItem : !include examples/recipeReturn.example } }
  /ingredients:
    is: [secured]
    type:  { collection: {exampleCollection : !include examples/ingredientCollectionRecipeReturn.example, exampleSchema : ingredient, exampleItem : !include examples/ingredient.example } }

/taggedProducts:
  is: [secured]
  type:  { collection: {exampleCollection : !include examples/taggedProductCollectionReturn.example, exampleSchema : taggedProduct, exampleItem : !include examples/taggedProduct.example } }
#  /{taggedProductId}:
#    is: [secured]
#    type:  { collection-item: {exampleReturnItem : !include examples/tagReturn.example } }

/tags:
  is: [secured]
  type:  { collection: {exampleCollection : !include examples/tagCollectionReturn.example, exampleSchema : tag, exampleItem : !include examples/tag.example } }
#  /{tagId}:
#    is: [secured]
#    type:  { collection-item: {exampleReturnItem :  } }

/listEntries:
  is: [secured]
  type:  { collection: {exampleCollection : !include examples/listEntryCollectionReturn.example, exampleSchema : listEntry, exampleItem : !include examples/shoppingList.example } }
#  /{listEntryId}:
#    is: [secured]
#    type:  { collection-item: {exampleReturnItem : , exampleSchema : listEntry, exampleItem : !include examples/shoppingList.example } }

/units:
  is: [secured]
  type:  { collection: {exampleCollection : !include examples/unitCollectionReturn.example, exampleSchema : unit, exampleItem : !include examples/unit.example } }
#  /{unitId}:
#    is: [secured]
#    type:  { collection-item: {exampleReturnItem : !include examples/unitReturn.example, exampleSchema : unit, exampleItem : !include examples/unit.example} }

/ingredients:
  is: [secured]
  type:  { collection: {exampleCollection : !include examples/ingredientCollectionReturn.example, exampleSchema : ingredient, exampleItem : !include examples/ingredient.example } }
#  /{ingredientId}:
#    is: [secured]
#    type: {collection-item: {exampleReturnItem : !include examples/ingredientReturn.example, exampleSchema : ingredient, exampleItem : !include examples/ingredient.example} }
