#%RAML 0.8
title: InstaList
version: v1
baseUri: http://instantlist.noorganization.org/{version}
mediaType: application/json
protocols: [ HTTP, HTTPS ]

schemas:
  - category: !include schemas/category.schema
  - ingredient: !include schemas/ingredient.schema
  - listEntry: !include schemas/listEntry.schema
  - product: !include schemas/product.schema
  - recipe: !include schemas/recipe.schema
  - shoppingList: !include schemas/shoppingList.schema
  - tag: !include schemas/tag.schema
  - taggedProduct: !include schemas/taggedProduct.schema
  - unit: !include schemas/unit.schema
  - error: !include schemas/error.schema
  - deviceinfo: !include schemas/deviceinfo.schema

securitySchemes:
  - basic:
      type: Basic Authentication
      describedBy:
        headers:
          Authorization:
            description: |
              Authorization-header as defined per RFC 2617. Expects the server defined user-id as user and the client defined secret as password.
            required: true
  - token:
      type: x-token
      describedBy:
        headers:
          Authorization:
            description: |
              Authorization with Token. The Contents of the header are
              "X-Token <token>" (without quotes). Since the token is based on
              ASCII-Characters, no encoding like UTF-8 should be performed.
            example: Authorization X-Token aadc7ade3ac84f0e98268d1b9eaae2bf
            required: true

traits:
  - secured:
      securedBy: [token]
      displayName: Secured
      description: Request require authentication!
      responses:
        401:
          description: Unauthorized
  - accepted:
      responses:
        202:
          description: The change was accepted. Please look again later for results.
  - added:
      responses:
        201:
          description: The element was correctly added. The Answer depends on type of data. Usually a JSON with either id or uuid.
  - badrequest:
      responses:
        400:
          description: Sent data was incomplete or wrong.
          body:
            application/json:
              schema: error
              example: |
                {
                  "message": "sent data was incomplete."
                }
  - gone:
      responses:
        410:
          description: A <<resourcePathName|!singularize>> with given uuid has been already deleted before.
          body:
            application/json:
              schema: error
              example: |
                {
                  "message": "Object has been already deleted."
                }

  - notfound:
      responses:
        404:
          description: The <<resourcePathName|!singularize>> with given uuid was not found.
          body:
            application/json:
              schema: error
              example: |
                {
                  "message": "Object was not found."
                }
  - conflict:
      responses:
        409:
          description: The <<resourcePathName|!singularize>> would conflict with existing data.
          body:
            application/json:
              schema: error
              example: |
                {
                  "message": "Object has a conflict with database data."
                }

      #queryParameters:
      #  accessToken:
      #    displayName: AccessToken
      #    description: An access token is required for secured routes
      #    required: true

resourceTypes:
  - collection:
      description: Collection of available <<resourcePathName>>.
      get:
        is: [secured, badrequest]
        description: |
          Get a list of <<resourcePathName>>.
        queryParameters:
          changedsince:
            type: string
            description: |
              Requests only the elements that changed since the given date.
              ISO 8601 time-format, where Java-Time format must be
              "yyyy-MM-dd'T'HH:mm:ss.SSSZ".
            example: "2016-01-19T11:54:07+0100"
            required: false
        responses:
          200:
            body:
              application/json:
                example: <<exampleCollection>>
      post:
        is: [secured, badrequest,conflict]
        description: |
          Creates a <<resourcePathName|!singularize>>.
        body:
          application/json:
            schema: <<exampleSchema>>
            example: <<exampleItem>>
        responses:
          201:
            description: The <<resourcePathName|!singularize>> was added successfully. No data.

#uuid:
##  displayName: Universal Unique Identifier
##  type: string
##  description: Identificator for the <<resourcePathName|!singularize>>.
##  example: 920b63a4-40e9-4a15-b45f-c728d9225fb5
##  required: false
  - collection-item:
      description: Entity representing a <<resourcePathName|!singularize>>.
      uriParameters:
        uuid:
          description: UUID of the <<resourcePathName|!singularize>>.
          type: string
          example: 3ee1dca9-ebda-4adb-90ce-8220e8c7fe99
      get:
        is: [secured, gone, notfound]
        description: Returns the <<resourcePathName|!singularize>>.
        responses:
          200:
            body:
              application/json:
                example: <<exampleReturnItem>>
                schema: <<exampleSchema>>
      put:
        is: [secured, badrequest, gone, notfound, conflict]
        description: |
          Updates a <<resourcePathName|!singularize>> item.
        body:
          application/json:
            schema: <<exampleSchema>>
            example: <<exampleItem>>
        responses:
          200:
            description: The <<resourcePathName|!singularize>> was updated successfully. No data.

      delete:
        is: [secured, gone, notfound]
        description: |
          Deletes the <<resourcePathName|!singularize>>.
        responses:
          200:
            description: Deletion was successful.

/groups:
  post:
      description: The action to create a new group of devices sharing lists etc.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "accesskey": "AB7Zbm",
                  "id" : 12345
                }
  /{id}:
    uriParameters:
      id:
        description: The id of the group.
        type: integer
    /devices:
      get:
        is: [secured]
        description: Get a list of all devices in group.
        responses:
          200:
            body:
              application/json:
                example: |
                  [
                    {
                      "id": 5,
                      "name": "dev1",
                      "authorized": true
                    },
                    {
                      "id": 4229,
                      "name": "homephone",
                      "authorized": false
                    }
                  ]
      post:
        is: [added, accepted, badrequest]
        description: The action to connect a new device with a group.
        body:
          application/json:
            example: |
              {
                "groupid" : "AB7Zbm",
                "secret" : "dkjhfsdcbuiufien=--ihrienncdjXXCndjjFJJED"
              }
        responses:
          200:
            description: This gets returned if registration with group was successful and login is now possible.
            body:
              application/json:
                example: |
                  {
                    "deviceid" : 1337
                  }
      /{deviceid}:
        uriParameters:
          deviceid:
            description: The id of the device in the group.
        get:
          is: [secured, notfound]
          description: Get info about a devcice.
          responses:
            200:
              body:
                application/json:
                  example: |
                    {
                      "id": 5,
                      "name": "dev1",
                      "authorized": true
                    }
                  schema: deviceinfo
        put:
          is: [secured, badrequest, notfound]
          description: Modify devices. Not all attributes need to be set.
          body:
            application/json:
              schema: deviceinfo
          responses:
            200:
              description: All changes were applied. No data.
        delete:
          is: [secured, notfound]
          description: Delete devices.
          responses:
            200:
              description: Requested device was deleted. No data.
      /token:
        securedBy: [basic]
        get:
          description: Get the auth token
          responses:
            200:
              body:
                application/json:
                  example: |
                    {
                      "token" : "fdskhbvvkddscddueFSNDFSAdnandk3229df-dFSJDKMds."
                    }
            401:
              body:
                application/json:
                  schema: error
                  example: |
                    {
                      "message": "Login failed"
                    }


    /access_key:
      get:
        is: [secured]
        description: The action to get a temporary access key to a group.
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "groupid": "AB7Zbm"
                  }

    /categories:
      type:  { collection: {exampleCollection : !include examples/categoryCollectionReturn.example, exampleSchema : category, exampleItem : !include examples/category.example } }
      /{uuid}:
        type:  { collection-item: {exampleReturnItem : !include examples/categoryReturn.example, exampleSchema : category, exampleItem : !include examples/category.example} }

    /products:
      type: {collection: {exampleCollection : !include examples/productCollectionReturn.example, exampleSchema : product, exampleItem : !include examples/product.example } }
      /{uuid}:
        type: {collection-item: {exampleReturnItem : !include examples/productReturn.example, exampleSchema : product, exampleItem : !include examples/product.example} }
    /lists:
      type:  { collection: {exampleCollection : !include examples/shoppingListCollectionReturn.example, exampleSchema : shoppingList, exampleItem : !include examples/shoppingList.example } }
      /{uuid}:
        type:  { collection-item: {exampleReturnItem : !include examples/shoppingListReturn.example, exampleSchema : shoppingList, exampleItem : !include examples/shoppingList.example } }

    /recipes:
      type:  { collection: {exampleCollection : !include examples/recipeCollectionReturn.example, exampleSchema : recipe, exampleItem : !include examples/recipe.example } }
      /{uuid}:
        type:  { collection-item: {exampleReturnItem : !include examples/recipeReturn.example, exampleSchema : recipe, exampleItem : !include examples/recipe.example } }

    /taggedProducts:
      type:  { collection: {exampleCollection : !include examples/taggedProductCollectionReturn.example, exampleSchema : taggedProduct, exampleItem : !include examples/taggedProduct.example } }
      /{uuid}:
        type:  { collection-item: {exampleReturnItem : !include examples/tagReturn.example, exampleSchema : taggedProduct, exampleItem : !include examples/taggedProduct.example } }

    /tags:
      type:  { collection: {exampleCollection : !include examples/tagCollectionReturn.example, exampleSchema : tag, exampleItem : !include examples/tag.example } }
      /{uuid}:
        type:  { collection-item: {exampleReturnItem : !include examples/tagReturn.example, exampleSchema : tag, exampleItem : !include examples/tag.example } }

    /listEntries:
      type:  { collection: {exampleCollection : !include examples/listEntryCollectionReturn.example, exampleSchema : listEntry, exampleItem : !include examples/listEntry.example } }
      /{uuid}:
        type:  { collection-item: {exampleReturnItem : !include examples/listEntryReturn.example, exampleSchema : listEntry, exampleItem : !include examples/listEntry.example } }

    /units:
      type:  { collection: {exampleCollection : !include examples/unitCollectionReturn.example, exampleSchema : unit, exampleItem : !include examples/unit.example } }
      /{uuid}:
        type:  { collection-item: {exampleReturnItem : !include examples/unitReturn.example, exampleSchema : unit, exampleItem : !include examples/unit.example} }

    /ingredients:
      type:  { collection: {exampleCollection : !include examples/ingredientCollectionReturn.example, exampleSchema : ingredient, exampleItem : !include examples/ingredient.example } }
      /{uuid}:
        type: {collection-item: {exampleReturnItem : !include examples/ingredientReturn.example, exampleSchema : ingredient, exampleItem : !include examples/ingredient.example} }
