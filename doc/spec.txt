pubsub:
    notifyListUpdated:
        parameters: [uuid]
        description: |
            Notifies the subscribers that the list with this uuid was updated.
rpc:
    addList:
        parameters: [uuid, name, category]
        returns: {code:int, badparams:list}
        description: |
            Creates or updates a list.
            code: HTTP-Codes. Can especially be 409, when name or uuid is already used. Always set.
            badparams: A list of strings, containing the names of bad parameters.
    updateList:
        parameters: [uuid, name, category]
        returns: {code:int, badparams:list}
        description: |
            Updates a list.
            code: HTTP-Codes. Can especially be 409, when name already used. Always set.
            badparams: A list of strings, containing the names of bad parameters.
    deleteList:
        parameters: [uuid]
        returns: {code:int}
        description: |
            Deletes one list.
            code: See HTTP-return-codes. Always set.
    getList:
        parameters: [uuid]
        returns: {code:int, uuid:string, name:string, category:string}
        description: |
            Returns one list.
            code: See HTTP-return-codes. Always set.
            category: Either null (no category) or uuid of category.
    getListUuids:
        parameters: []
        returns: {code:int, lists:list}
        description: |
            Returns all accessible lists.
            code: See HTTP-return-codes. Always set.
            lists: Lists of strings containing list-uuids.
    addCategory:
        parameters: [uuid, name]
        returns: {code:int, badparams:list}
        description: |
            Adds a category to the category pool.
            code: See HTTP-return-codes. Always set.
            badparams: A list of strings, containing the names of bad parameters.
    updateCategory:
        parameters: [uuid, name]
        returns: {code:int, badparams:list}
        description: |
            Updates the category.
            code: See HTTP-return-codes. Always set.
            badparams: A list of strings, containing the names of bad parameters.
    deleteCategory:
        parameters: [uuid]
        returns: {code:int}
        description: |
            Deletes the category related to the given id. (Deletes no category with lists in it?)
            code: See HTTP-return-codes. Always set.
    getCategory:
        parameters: [uuid]
        returns: {code:int, uuid:string, name:string}
        description: |
            Returns the list by the given uuid.
            code: See HTTP-return-codes. Always set.
            uuid: The uuid of the category.
            name: The name of the category.
    getCategoryUuids:
        parameters: []
        returns: {code:int, categories:list}
        description: |
            Returns a list of all category ids.
            code: See HTTP-return-codes. Always set.
            categories: list of category uuids.
    addUnit:
        parameters: [uuid, name]
        returns: {code:int, badparams:list}
        description: |
            Adds a unit to the unit pool.
            code: See HTTP-return-codes. Always set.
            badparams: A list of strings, containing the names of bad parameters.
    updateUnit:
        parameters: [uuid, name]
        returns: {code:int, badparams:list}
        description: |
            Updates the unit.
            code: See HTTP-return-codes. Always set.
            badparams: A list of strings, containing the names of bad parameters.
    deleteUnit:
        parameters: [uuid]
        returns: {code:int}
        description: |
            Deletes the unit related to the given id. (Mit deletion mode?)
            code: See HTTP-return-codes. Always set.
    getUnit:
        parameters: [uuid]
        returns: {code:int, uuid:string, name:string}
        description: |
            Returns the unit by the given uuid.
            code: See HTTP-return-codes. Always set.
            uuid: The uuid of the unit.
            name: The name of the unit.
    getUnitUuids:
        parameters: []
        returns: {code:int, units:list}
        description: |
            Returns a list of all unit ids.
            code: See HTTP-return-codes. Always set.
            units: list of unit uuids.
    addTag:
        parameters: [uuid, name]
        returns: {code:int, badparams:list}
        description: |
            Adds a tag to the tag pool.
            code: See HTTP-return-codes. Always set.
            badparams: A list of strings, containing the names of bad parameters.
    updateTag:
        parameters: [uuid, name]
        returns: {code:int, badparams:list}
        description: |
            Updates the tag.
            code: See HTTP-return-codes. Always set.
            badparams: A list of strings, containing the names of bad parameters.
    deleteTag:
        parameters: [uuid]
        returns: {code:int}
        description: |
            Deletes the tag related to the given id. (Mit deletion mode?)
            code: See HTTP-return-codes. Always set.
    getTag:
        parameters: [uuid]
        returns: {code:int, uuid:string, name:string}
        description: |
            Returns the tag by the given uuid.
            code: See HTTP-return-codes. Always set.
            uuid: The uuid of the tag.
            name: The name of the tag.
    getTagUuids:
        parameters: []
        returns: {code:int, tags:list}
        description: |
            Returns a list of all tag uuids.
            code: See HTTP-return-codes. Always set.
            tags: list of tag uuids.
    addProduct:
        parameters: [uuid, name, unit, defaultAmount, stepAmount]
        returns: {code:int, badparams:list}
        description: |
            Adds a product to the product pool.
            code: See HTTP-return-codes. Always set.
            badparams: A list of strings, containing the names of bad parameters.
    updateProduct:
        parameters: [uuid, name, unit, defaultAmount, stepAmount]
        returns: {code:int, badparams:list}
        description: |
            Updates the product.
            code: See HTTP-return-codes. Always set.
            badparams: A list of strings, containing the names of bad parameters.
    deleteProduct:
        parameters: [uuid]
        returns: {code:int}
        description: |
            Deletes the product related to the given id. (Mit deletion mode?)
            code: See HTTP-return-codes. Always set.
    getProduct:
        parameters: [uuid]
        returns: {code:int, uuid:string, name:string, unit:string, defaultAmount:float, stepAmount:float}
        description: |
            Returns the product by the given uuid.
            code: See HTTP-return-codes. Always set.
            uuid: The uuid of the product.
            name: The name of the product.
            unit: The uuid of the unit or null if no unit.
            defaultAmount: The amount of this item that is added to the shoppingList.
            stepAmount: The amount of a step when increasing or decreasing the value.
    getProductUuids:
        parameters: []
        returns: {code:int, products:list}
        description: |
            Returns a list of all product uuids.
            code: See HTTP-return-codes. Always set.
            products: list of product uuids.
    addListEntry:
        parameters: [uuid, shoppingList, product, amount, struck, priority]
        returns: {code:int, badparams:list}
        description: |
            Adds a listEntry to the listEntry pool.
            code: See HTTP-return-codes. Always set.
            badparams: A list of strings, containing the names of bad parameters.
    updateListEntry:
        parameters: [uuid, shoppingList, product, amount, struck, priority]
        returns: {code:int, badparams:list}
        description: |
            Updates the listEntry.
            code: See HTTP-return-codes. Always set.
            badparams: A list of strings, containing the names of bad parameters.
    deleteListEntry:
        parameters: [uuid]
        returns: {code:int}
        description: |
            Deletes the listEntry related to the given id.
            code: See HTTP-return-codes. Always set.
    getListEntry:
        parameters: [uuid]
        returns: {code:int, uuid:String, shoppingList:String, product:String, amount:float, struck:boolean, priority:int}
        description: |
            Returns the product by the given uuid.
            code: See HTTP-return-codes. Always set.
            uuid: The uuid of the listEntry.
            shoppingList: The uuid of the shoppingList the entry is related to.
            product: The product uuid the listEntry represents.
            amount: The amount of how many items of this product are in the current list.
            struck: Represents if a entry is struck(true) or not struck (false).
            priority: An indicator which priority this entry has.
    getListEntryUuids:
        parameters: []
        returns: {code:int, listEntries:list}
        description: |
            Returns a list of all listEntry uuids.
            code: See HTTP-return-codes. Always set.
            listEntries: list of listEntry uuids.
    addIngredient:
        parameters: [uuid, product, recipe, amount]
        returns: {code:int, badparams:list}
        description: |
            Adds a ingredient to the ingredient pool.
            code: See HTTP-return-codes. Always set.
            badparams: A list of strings, containing the names of bad parameters.
    updateIngredient:
        parameters: [uuid, product, recipe, amount]
        returns: {code:int, badparams:list}
        description: |
            Updates the ingredient.
            code: See HTTP-return-codes. Always set.
            badparams: A list of strings, containing the names of bad parameters.
    deleteIngredient:
        parameters: [uuid]
        returns: {code:int}
        description: |
            Deletes the ingredient related to the given uuid.
            code: See HTTP-return-codes. Always set.
    getIngredient:
        parameters: [uuid]
        returns: {code:int, uuid:String, product:String, recipe:String, amount:float}
        description: |
            Returns the ingredient by the given uuid.
            code: See HTTP-return-codes. Always set.
            uuid: The uuid of the ingredient.
            product: The uuid of the product the ingredient represents.
            recipe: The uuid of the recipe the ingredient is related to.
            amount: The amount of how many items of this product are in the recipe.
    getIngredientUuidsByRecipe:
        parameters: [recipe]
        returns: {code:int, ingredients:list}
        description: |
            Returns a list of all ingredient uuids that are related to this recipe.
            code: See HTTP-return-codes. Always set.
            ingredients: list of ingredient uuids.
    addRecipe:
        parameters: [uuid, name]
        returns: {code:int, badparams:list}
        description: |
            Adds a recipe to the recipe pool.
            code: See HTTP-return-codes. Always set.
            badparams: A list of strings, containing the names of bad parameters.
    updateRecipe:
        parameters: [uuid, name]
        returns: {code:int, badparams:list}
        description: |
            Updates the recipe.
            code: See HTTP-return-codes. Always set.
            badparams: A list of strings, containing the names of bad parameters.
    deleteRecipe:
        parameters: [uuid]
        returns: {code:int}
        description: |
            Deletes the recipe related to the given uuid. Also deletes all related ingredients.
            code: See HTTP-return-codes. Always set.
    getRecipe:
        parameters: [uuid]
        returns: {code:int, uuid:String, name:String}
        description: |
            Returns the recipe by the given uuid.
            code: See HTTP-return-codes. Always set.
            uuid: The uuid of the recipe.
            name: The name of the recipe.
    getRecipeUuids:
        parameters: []
        returns: {code:int, recipes:list}
        description: |
            Returns a list of all recipe uuids.
            code: See HTTP-return-codes. Always set.
            recipes: list of recipe uuids.
    addTaggedProduct:
        parameters: [uuid, tag, product]
        returns: {code:int, badparams:list}
        description: |
            Adds a taggedProduct to the taggedProduct pool.
            code: See HTTP-return-codes. Always set.
            badparams: A list of strings, containing the names of bad parameters.
    updateTaggedProduct:
        parameters: [uuid, tag, product]
        returns: {code:int, badparams:list}
        description: |
            Updates the taggedProduct.
            code: See HTTP-return-codes. Always set.
            badparams: A list of strings, containing the names of bad parameters.
    deleteTaggedProduct:
        parameters: [uuid]
        returns: {code:int}
        description: |
            Deletes the taggedProduct related to the given uuid.
            code: See HTTP-return-codes. Always set.
    getTaggedProduct:
        parameters: [uuid]
        returns: {code:int, uuid:String, tag:String, product:String}
        description: |
            Returns the taggedProduct by the given uuid.
            code: See HTTP-return-codes. Always set.
            uuid: The uuid of the taggedProduct.
            tag: The tag uuid of the taggedProduct.
            product: The product uuid of the taggedProduct.
    getTaggedProductUuids:
        parameters: []
        returns: {code:int, taggedProducts:list}
        description: |
            Returns a list of all taggedProduct uuids.
            code: See HTTP-return-codes. Always set.
            taggedProducts: list of taggedProduct uuids.
    getTaggedProductUuidsByTag:
        parameters: [tag]
        returns: {code:int, taggedProducts:list}
        description: |
            Returns a list of all taggedProduct uuids related to a given tag uuid.
            code: See HTTP-return-codes. Always set.
            taggedProducts: list of taggedProduct uuids.
    getTaggedProductUuidsByProduct:
        parameters: [product]
        returns: {code:int, taggedProducts:list}
        description: |
            Returns a list of all taggedProduct uuids related to a given product uuid.
            code: See HTTP-return-codes. Always set.
            taggedProducts: list of taggedProduct uuids.
    
    